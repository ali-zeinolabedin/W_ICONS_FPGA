#-------------------------------------------
#  Module : Makefile.project.iverilog
#  Author : Ali Zeinolabedin (based on stimc)
#  Company: Blackrock Neurotech
#-------------------------------------------

# ------------  configuration parameters ---------------------------------------
CDS_TOOL_SUITE ?= $(SIMULATOR)

VLOG_LOG      ?= $(WORK_DIR)/$(SIM_NAME)_vlog.log
ELAB_LOG      ?= $(WORK_DIR)/$(SIM_NAME)_elab.log
SIM_LOG       ?= $(WORK_DIR)/$(SIM_NAME)_sim.log
WAVE_LOG      ?= $(WORK_DIR)/$(SIM_NAME)_wave.log
XRUN_LOG	    ?= $(WORK_DIR)/$(SIM_NAME)_xrun.log
SDF_LOG       ?= $(WORK_DIR)/$(SIM_NAME)_sdf.log
SDF_STAT_LOG  ?= $(WORK_DIR)/$(SIM_NAME)_sdf_stats.log
SDF_TDUMP_LOG ?= $(WORK_DIR)/$(SIM_NAME)_sdf_tdump.xml
COV_LOG       ?= $(WORK_DIR)/$(SIM_NAME)_cov.log


VLOG_NET_LOG      ?= $(WORK_DIR)/$(SIM_NAME)_vlog_net.log
ELAB_NET_LOG      ?= $(WORK_DIR)/$(SIM_NAME)_elab_net.log
SIM_NET_LOG       ?= $(WORK_DIR)/$(SIM_NAME)_sim_net.log
WAVE_NET_LOG      ?= $(WORK_DIR)/$(SIM_NAME)_wave_net.log

DEFAULT_TIMESCALE ?= 1ns/1ps

#===============================================================================
# The following statements usually need not to be changed
#===============================================================================

ifeq ($(CDS_TOOL_SUITE),ius)
  export CDS_PREFIX = nc
else
  export CDS_PREFIX = xm
endif

VLOG          = $(CDS_PREFIX)vlog
ELAB          = $(CDS_PREFIX)elab
SIM           = $(CDS_PREFIX)sim
WAVEBROWSE    = simvision
XRUN          = xrun
SDFC          = $(CDS_PREFIX)sdfc
COV           = imc

ECHO          = @echo -e
# ------------  cdslib + directories  ------------------------------------------
CDSLIB_FILE     = $(WORK_DIR)/cds.lib
CDS_WORKLIBNAME = worklib
CDS_WAVENAME    = simlibs
CDS_COVNAME     = cov_work
CDS_WORKLIBDIR  = $(WORK_DIR)/$(CDS_WORKLIBNAME)
CDS_WAVEDIR     = $(WORK_DIR)/$(CDS_WAVENAME)
CDS_COVDIR      = $(WORK_DIR)/$(CDS_COVNAME)
CDS_SIMVISDIR   = $(WORK_DIR)/simvision
HDLVAR_FILE     = $(WORK_DIR)/hdl.var

CDS_WAVEDB_BASE = $(CDS_WAVEDIR)/waves
CDS_WAVEDB      = $(CDS_WAVEDB_BASE).shm
RUNSCR_BATCH    = $(WORK_DIR)/sim_ctrl_batch.tcl
RUNSCR_GUI      = $(WORK_DIR)/sim_ctrl_gui.tcl

# ------------  tool flags for vlog/elab  --------------------------------------
VLOG_FLAGS       = -nocopyright -update 
VLOG_FLAGS      += -cdslib $(CDSLIB_FILE) -hdlvar $(HDLVAR_FILE)
VLOG_FLAGS_NET   = -nocopyright -update  
VLOG_FLAGS_NET  += -cdslib $(CDSLIB_FILE) -hdlvar $(HDLVAR_FILE) -define NTC -define RECREM 

VLOG_SRC_ARGS   += $(addprefix -f ,$(VLOG_SRC_FILES))
VLOG_SOURCES    += $(foreach f,$(VLOG_SRC_FILES), $(shell echo $(shell cat $f | sed -e 'sX^\(\#\|//\).*XX')))

VLOG_SRC_ARGS_NET   += $(addprefix -f ,$(VLOG_SRC_FILES_NET))
VLOG_SOURCES_NET    += $(foreach f,$(VLOG_SRC_FILES_NET), $(shell echo $(shell cat $f | sed -e 'sX^\(\#\|//\).*XX')))
#$(info ${VLOG_SOURCES_NET})

ELAB_FLAGS       = -nocopyright -licqueue -update -access +rwc -timescale $(DEFAULT_TIMESCALE)
ELAB_FLAGS      += -cdslib $(CDSLIB_FILE) -hdlvar $(HDLVAR_FILE)
ELAB_FLAGS_NET   = -nocopyright -licqueue -update -access +rwc -timescale $(DEFAULT_TIMESCALE) 
ELAB_FLAGS_NET  += -cdslib $(CDSLIB_FILE) -hdlvar $(HDLVAR_FILE)  -sdf_nopathedge -nowarn SDFNDP -nowarn SDFNSB -nowarn CUVWSP
#WC: -nowarn CUVWSP -nowarn SDFNSB
#BC: -nowarn SDFNDP

SIM_FLAGS        = -nocopyright -licqueue -keyfile $(WORK_DIR)/$(SIM).script.tcl
SIM_FLAGS       += -cdslib $(CDSLIB_FILE) -hdlvar $(HDLVAR_FILE)
SIM_FLAGS       += -simvisargs "-title $(SIM_NAME)" +bus_conflict_off

SIM_FLAGS_NET   += $(SIM_FLAGS) -input ../common/tchecks.tcl

$(info  ${CDS_SIM_COVERAGE})
#TEST_NAME is updated by regression if we call the coverage from the regression script
TEST_NAME ?= $(shell echo ${PWD} | sed -r -e 's|${PRJ_DIR}/units/([^/]+)/.*/([^/+]+)|\2|')
#$(info  ${CDS_COVNAME})
#$(info  ${TEST_NAME})
ifeq ($(CDS_SIM_COVERAGE),1)
	ELAB_FLAGS += -covfile ${PRJ_DIR}/env/coverage/cov.ccf
	SIM_FLAGS  += -covoverwrite -covworkdir $(CDS_COVDIR) -covtest $(TEST_NAME)
endif

WAVE_FLAGS       = -nocopyright  -keyfile $(WORK_DIR)/$(WAVEBROWSE).script.tcl
WAVE_FLAGS      += -cdslib $(CDSLIB_FILE) -title "$(SIM_NAME)"

VLOG_TARGET      = $(VLOG_LOG)
ELAB_TARGET      = $(ELAB_LOG)

VLOG_NET_TARGET  = $(VLOG_NET_LOG)
ELAB_NET_TARGET  = $(ELAB_NET_LOG)

# coverage
CDS_SIM_COVERAGE ?= 0

# ------------  info output ----------------------------------------------------
info-vlog:
ifneq (,$(strip $(VLOG_INCDIRS)))
	$q$(call echo, "$${b}$(vlogcolor)VLOG-INCDIRS$${c}$(shell $(call shell-fmtflags,$(addprefix -I,$(VLOG_INCDIRS))))")
endif
ifneq (,$(strip $(VLOG_FLAGS) $(ADDITIONAL_VLOG_FLAGS)))
	$q$(call echo, "$${b}$(vlogcolor)VLOG-FLAGS$${c}$(shell $(call shell-fmtflags,$(VLOG_FLAGS) $(ADDITIONAL_VLOG_FLAGS)))")
endif

info-vlog-net:
ifneq (,$(strip $(VLOG_INCDIRS)))
	$q$(call echo, "$${b}$(vlogcolor)VLOG-INCDIRS$${c}$(shell $(call shell-fmtflags,$(addprefix -I,$(VLOG_INCDIRS))))")
endif
ifneq (,$(strip $(VLOG_FLAGS) $(ADDITIONAL_VLOG_FLAGS)))
	$q$(call echo, "$${b}$(vlogcolor)VLOG-FLAGS-NET$${c}$(shell $(call shell-fmtflags,$(VLOG_FLAGS_NET) $(ADDITIONAL_VLOG_FLAGS_NET)))")
endif

info-elab:
ifneq (,$(strip $(ELAB_FLAGS) $(ADDITIONAL_ELAB_FLAGS)))
	$q$(call echo, "$${b}$(elabcolor)ELAB-FLAGS$${c}$(shell $(call shell-fmtflags,$(ELAB_FLAGS) $(ADDITIONAL_ELAB_FLAGS)))")
endif

info-elab-net:
ifneq (,$(strip $(ELAB_FLAGS) $(ADDITIONAL_ELAB_FLAGS)))
	$q$(call echo, "$${b}$(elabcolor)ELAB-FLAGS-NET$${c}$(shell $(call shell-fmtflags,$(ELAB_FLAGS_NET) $(ADDITIONAL_ELAB_FLAGS_NET)))")
endif

info-sim:
ifneq (,$(strip $(ELAB_FLAGS) $(ADDITIONAL_ELAB_FLAGS)))
	$q$(call echo, "$${b}$(elabcolor)SIM-FLAGS$${c}$(shell $(call shell-fmtflags,$(SIM_FLAGS)))")
endif

info-sim-net:
ifneq (,$(strip $(ELAB_FLAGS) $(ADDITIONAL_ELAB_FLAGS)))
	$q$(call echo, "$${b}$(elabcolor)SIM-FLAGS-NET$${c}$(shell $(call shell-fmtflags,$(SIM_FLAGS_NET)))")
endif

.PHONY: info-vlog info-elab

# ------------  rules ----------------------------------------------------------
#-debug -gdb -gdbsh -clean
xrun:$(VLOG_SOURCES) $(COMPILE_DEPS) $(CDSLIB_FILE) $(HDLVAR_FILE) | $(WORK_DIR) info-vlog
	$q$(XRUN) -ieee1364 -v93 -access +rwc  $(addprefix -incdir ,$(VLOG_INCDIRS)) $(addprefix -f ,$(VLOG_SRC_FILES))  -logfile $(XRUN_LOG) -tcl

$(VLOG_TARGET): $(VLOG_SOURCES) $(COMPILE_DEPS) $(CDSLIB_FILE) $(HDLVAR_FILE) | $(WORK_DIR) info-vlog
	$q$(call echo, "$${b}$(vlogcolor)VLOG$${c} $(SIM_NAME)")
	$q$(VLOG) $(addprefix -incdir ,$(VLOG_INCDIRS)) $(VLOG_FLAGS) -logfile $(VLOG_LOG) $(ADDITIONAL_VLOG_FLAGS) $(addprefix -f ,$(VLOG_SRC_FILES))

$(ELAB_TARGET): $(VLOG_TARGET) $(CDSLIB_FILE) $(HDLVAR_FILE) | $(WORK_DIR) info-elab
	$q$(call echo, "$${b}$(elabcolor)ELAB$${c} $(SIM_NAME)")
	$q$(ELAB) $(TOPLEVEL) $(ELAB_FLAGS) -logfile $(ELAB_LOG) $(ADDITIONAL_ELABFLAGS) 

$(VLOG_NET_TARGET): $(VLOG_SOURCES_NET) $(COMPILE_DEPS) $(CDSLIB_FILE) $(HDLVAR_FILE) | $(WORK_DIR) info-vlog-net
	$q$(call echo, "$${b}$(vlogcolor)VLOG$${c} $(SIM_NAME)")
	$q$(VLOG) $(addprefix -incdir ,$(VLOG_INCDIRS)) $(VLOG_FLAGS_NET) -logfile $(VLOG_NET_LOG) $(ADDITIONAL_VLOG_FLAGS_NET) $(addprefix -f ,$(VLOG_SRC_FILES_NET)) 

$(ELAB_NET_TARGET): $(VLOG_NET_TARGET) $(CDSLIB_FILE) $(HDLVAR_FILE) | $(WORK_DIR) info-elab-net
	$q$(call echo, "$${b}$(elabcolor)ELAB$${c} $(SIM_NAME)")
	$q$(ELAB) $(TOPLEVEL) $(ELAB_FLAGS_NET) -logfile $(ELAB_NET_LOG) $(ADDITIONAL_ELAB_FLAGS_NET) $(ELAB_OPTS) -sdfstats $(SDF_STAT_LOG) -dumptiming $(SDF_TDUMP_LOG)

vlog: $(VLOG_TARGET)
elab:  $(ELAB_TARGET) 
elabnet: sdfcompile $(ELAB_NET_TARGET)

#+bus_conflict_off : to define an inline variable to disable pad error at the begining 

run: $(ELAB_TARGET) $(CDSLIB_FILE) $(HDLVAR_FILE) $(RUNSCR_BATCH) | info-sim
	$q$(call echo, "\n$${b}$(runcolor)RUN $${c} $(SIM_NAME)\n")
	$q$(SIM) $(SIM_FLAGS) -logfile $(SIM_LOG) $(TOPLEVEL) -input $(RUNSCR_BATCH)  

runnet: $(ELAB_NET_TARGET) $(CDSLIB_FILE) $(HDLVAR_FILE) $(RUNSCR_BATCH)
	$q$(call echo, "\n$${b}$(run color)RUN $${c} $(SIM_NAME)\n")
	$q$(SIM) -logfile $(SIM_NET_LOG) $(SIM_FLAGS_NET) $(TOPLEVEL) -input $(RUNSCR_BATCH)

runnetbatch: $(ELAB_NET_TARGET) $(CDSLIB_FILE) $(HDLVAR_FILE) $(RUNSCR_BATCH)
	$q$(call echo, "\n$${b}$(run color)RUN $${c} $(SIM_NAME)\n")
	$q$(SIM) -logfile $(SIM_NET_LOG) $(SIM_FLAGS_NET) $(TOPLEVEL)  -input $(RUNSCR_BATCH) 2>&1 | tee $(BATCH_LOG)  

memcheck: $(ELAB_TARGET) $(CDSLIB_FILE) $(HDLVAR_FILE) $(RUNSCR_BATCH)
	$q$(call echo, "\n$${b}$(runcolor)MEMCHECK $${c} $(SIM_NAME)\n")
	$q$(MEMCHK) $(SIM) $(SIM_FLAGS) $(TOPLEVEL) -input $(RUNSCR_BATCH)

runbatch: $(ELAB_TARGET) $(CDSLIB_FILE) $(HDLVAR_FILE) $(RUNSCR_BATCH) | info-sim
	$q$(call echo, "\n$${b}$(runcolor)RUN $${c} $(SIM_NAME)\n")
	$q$(SIM) -logfile $(SIM_LOG) $(SIM_FLAGS) $(TOPLEVEL) -dumpstack -input $(RUNSCR_BATCH) 2>&1 | tee $(BATCH_LOG)

runbatch_dump: runbatch

rungui: $(ELAB_TARGET) $(CDSLIB_FILE) $(HDLVAR_FILE) $(RUNSCR_GUI) | $(CDS_SIMVISDIR) info-sim
	$q$(call echo, "\n$${b}$(runcolor)RUN $${c} $(SIM_NAME)\n")
	$q$(LN) $(CDS_SIMVISDIR) .simvision
	$q$(SIM) -logfile $(SIM_LOG) $(SIM_FLAGS) -gui $(TOPLEVEL) -input $(RUNSCR_GUI) 2>&1 | tee $(BATCH_LOG)
	$qrm .simvision

runnetgui: $(ELAB_NET_TARGET) $(CDSLIB_FILE) $(HDLVAR_FILE) $(RUNSCR_GUI) | $(CDS_SIMVISDIR)
	$q$(call echo, "\n$${b}$(runcolor)RUN $${c} $(SIM_NAME)\n")
	$q$(LN) $(CDS_SIMVISDIR) .simvision
	$q$(SIM) -logfile $(SIM_NET_LOG) $(SIM_FLAGS_NET) -gui $(TOPLEVEL) -input $(RUNSCR_GUI) 2>&1 | tee $(BATCH_LOG)
	$qrm .simvision


covgui:
	$q$(call echo, "\n$${b}$(runcolor)Running $(COV) $${c} $(SIM_NAME)\n")
	$(COV) -licqueue -logfile $(COV_LOG) -load $(CDS_COVDIR)/scope/$(TEST_NAME)

covbatch:
	$q$(call echo, "\n$${b}$(runcolor)Running $(COV) $${c} $(SIM_NAME)\n")
	$(COV) -licqueue -logfile $(COV_LOG) -load $(CDS_COVDIR)/scope/$(TEST_NAME)  -batch

runcov:
	@make run CDS_SIM_COVERAGE=1

runcovbatch:
	@make runbatch_dump CDS_SIM_COVERAGE=1

runcovgui:
	@make runcov
	@make covgui

covmerge:
	imc -exec ${PRJ_DIR}/env/coverage/merge_coverage.tcl

gui: $(CDS_WAVEDB) | $(CDS_SIMVISDIR)
	$q$(LN) $(CDS_SIMVISDIR) .simvision
	$q$(WAVEBROWSE) $(WAVE_FLAGS) -logfile $(WAVE_NET_LOG) -snapshot $(TOPLEVEL) $(CDS_WAVEDB)
	$qrm .simvision

$(HDLVAR_FILE): $(CDSLIB_FILE) | $(WORK_DIR)
	@echo 'DEFINE WORK worklibdir' > $@

$(CDSLIB_FILE): | $(WORK_DIR) $(CDS_WORKLIBDIR) $(CDS_WAVEDIR) $(CDS_COVDIR)
	@echo 'DEFINE worklibdir $(CDS_WORKLIBNAME)' >  $@
	@echo 'DEFINE wavedir    $(CDS_WAVENAME)'    >> $@
	@echo 'DEFINE covdir     $(CDS_COVNAME)'     >> $@

$(RUNSCR_BATCH): | $(WORK_DIR) $(CDS_WAVEDIR)
	@echo 'database $(CDS_WAVEDB_BASE) -shm -default' >  $@
	@echo 'run'                                       >> $@
	@echo 'exit'                                      >> $@

$(RUNSCR_GUI): | $(WORK_DIR) $(CDS_WAVEDIR)
	@echo 'database $(CDS_WAVEDB_BASE) -shm -default' >  $@

$(CDS_WORKLIBDIR) $(CDS_WAVEDIR) $(CDS_COVDIR) $(CDS_SIMVISDIR): | $(WORK_DIR)
	$qmkdir -p $@

########################################################################
# sdfcompile
########################################################################

SDF_OUTPUTDIR  ?= ../common/work/sdf_files
SDF_OPTS       ?= 

#SDF_OPTS       ?= -nostdout
# create sdf targets
#$(info ${SDF_SOURCES})
#$(info $(SDF_OUTPUTDIR)/$(notdir ${SDF_SOURCES}).compiled)

sdfcompile: | $(WORK_DIR)
	$q$(call echo, "$${c}")
	$q$(call echo, "$(sdfcolor)$bCompiled SDF-Files$${c}")
	$q$(call echo, "$(sdfcolor)$bSDFC $(SDF_SOURCES)$${c}")
	$q$(SDFC) -nocopyright -messages -logfile $(SDF_LOG) $(SDF_OPTS) -output $(SDF_OUTPUTDIR)/$(notdir ${SDF_SOURCES}).compiled ${SDF_SOURCES} 
	ln -sf $(SDF_OUTPUTDIR)/$(notdir ${SDF_SOURCES}).compiled

	

.PHONY: sdfcompile 
########################################################################
clean-vlog:
	$qrm -f \
        $(WAVE_LOG) $(SIM_LOG) $(VLOG_LOG) $(ELAB_LOG) \
		$(CDSLIB_FILE) $(HDLVAR_FILE) \
		$(RUNSCR_BATCH) $(RUNSCR_GUI) \
        2> /dev/null || true
	$qrm -rf \
		$(CDS_WORKLIBDIR) $(CDS_WAVEDIR) $(CDS_COVDIR) $(CDS_SIMVISDIR)

clean-gui:
	$qrm -rf .simvision 2> /dev/null || true

.PHONY: vlog elab run runbatch rungui gui memcheck clean-vlog clean-gui runbatch_dump
